/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.budthapa.jts.view.job;

import com.budthapa.jts.business.JobBL;
import com.budthapa.jts.model.JobBean;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author budthapa
 */
public class ViewJob extends javax.swing.JInternalFrame {

    private JobBL job;
    private JobBean jobBean;
    public static DefaultTableModel table;
    public static String jobCompleted;
    public static boolean jobCompletedFlag;

    /**
     * Creates new form ViewJob
     */
    public ViewJob() {
        initComponents();
        setVisible(true);
        job = new JobBL();
        jobBean = new JobBean();
        //bring table data from job
        initialiseTableAndFillWithData();

    }

    public void refreshTable() {
        initialiseTableAndFillWithData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewClientsTable = new javax.swing.JTable();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("View list of Jobs");

        viewClientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewClientsTable.setToolTipText("Double Click to Edit or Delete this row.");
        viewClientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewClientsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(viewClientsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 995, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialiseTableAndFillWithData() {
        //initialise table and set editable to false
        table = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };

        List<JobBean> jobList = job.getJobList();
        //column name is compulsary, if not added, added rows will not be displayed
        table.addColumn("S.No");
        table.addColumn("Name");
        table.addColumn("Assigned To");
        table.addColumn("Black & White");
        table.addColumn("Color");
        table.addColumn("Column");
        table.addColumn("Cm");
        table.addColumn("Client");
        table.addColumn("Media House");
        table.addColumn("Nepali");
        table.addColumn("English");
        table.addColumn("Position");
        table.addColumn("Publication Day(s)");
        table.addColumn("Contents");
        table.addColumn("Due Date");
        table.addColumn("Job Status");

        for (int i = 0; i < jobList.size(); i++) {
            if (jobList.get(i).isJobCompleted()) {
                jobCompletedFlag = true;
                jobCompleted = "Completed";
            } else {
                jobCompleted = "On Progress";
            }
            //create dynamic row
            Object[] rowData = {
                jobList.get(i).getJobId(), jobList.get(i).getJobName(), jobList.get(i).getAssigneeName(), jobList.get(i).isDesignTypeBlackAndWhite(),
                jobList.get(i).isDesignTypeColor(), jobList.get(i).getSizeColumn(), jobList.get(i).getSizeCm(), jobList.get(i).getClientName(),
                jobList.get(i).getMediaHouseName(), jobList.get(i).isLanguageNepali(), jobList.get(i).isLanguageEnglish(), jobList.get(i).getPosition(),
                jobList.get(i).getPublicationDays(), jobList.get(i).getJobContents(), jobList.get(i).getDueDate(), jobCompleted
            };
            table.addRow(rowData);
        }
        viewClientsTable.setModel(table);
    }

    private void viewClientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewClientsTableMouseClicked
        //if user click twice in a row
        if (evt.getClickCount() == 2) {
            JTable table = (JTable) evt.getSource();
            int selectedRow = table.getSelectedRow();
            int counter = 0;

            //get the items from the row starting from column index 0 to column max size;
            JobBean jb = new JobBean();
            jb.setJobId((int) table.getValueAt(selectedRow, counter));
            jb.setJobName((String) table.getValueAt(selectedRow, ++counter));
            jb.setAssigneeName((String) table.getValueAt(selectedRow, ++counter));
            jb.setDesignTypeBlackAndWhite((Boolean) table.getValueAt(selectedRow, ++counter));
            jb.setDesignTypeColor((Boolean) table.getValueAt(selectedRow, ++counter));
            jb.setSizeColumn((String) table.getValueAt(selectedRow, ++counter));
            jb.setSizeCm((String) table.getValueAt(selectedRow, ++counter));
            jb.setClientName((String) table.getValueAt(selectedRow, ++counter));
            jb.setMediaHouseName((String) table.getValueAt(selectedRow, ++counter));
            jb.setLanguageNepali((Boolean) table.getValueAt(selectedRow, ++counter));
            jb.setLanguageEnglish((Boolean) table.getValueAt(selectedRow, ++counter));
            jb.setPosition((String) table.getValueAt(selectedRow, ++counter));
            jb.setPublicationDays((int) table.getValueAt(selectedRow, ++counter));
            jb.setJobContents((String) table.getValueAt(selectedRow, ++counter));
            jb.setDueDate((String) table.getValueAt(selectedRow, ++counter));
            jobCompleted=(String)table.getValueAt(selectedRow, ++counter);

            //open dialog to edit or delete the user;
            EditJob editJob = new EditJob();
            JobFrame frame = new JobFrame();
            frame.getFrame();
            frame.setVisible(true);
            editJob.add(frame);

            //set button text dynamically
            //set button text to 'update' while accessing from this class
            String buttonText = "Update";
            frame.setButtonText(buttonText);

            if (jobCompleted.equals("Completed")) {
                frame.disableAllFields();
            } else {
                frame.setValuesToEdit(jb);
            }

            editJob.rowIdToDelete = selectedRow;
        }
    }//GEN-LAST:event_viewClientsTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable viewClientsTable;
    // End of variables declaration//GEN-END:variables

}
